import 'package:flutter/foundation.dart';
import 'package:versee/models/bible_models.dart';
import 'package:versee/services/typed_firebase_service.dart';
import 'dart:async';

/// Servi√ßo para gerenciar cole√ß√µes de vers√≠culos salvos integrado com Firebase
class VerseCollectionService extends ChangeNotifier {
  static final VerseCollectionService _instance = VerseCollectionService._internal();
  factory VerseCollectionService() => _instance;
  VerseCollectionService._internal() {
    _initializeFirebaseConnection();
  }

  final TypedFirebaseService _firebaseService = TypedFirebaseService();
  final List<VerseCollection> _collections = [];
  StreamSubscription<List<VerseCollection>>? _collectionsSubscription;

  @override
  void dispose() {
    _collectionsSubscription?.cancel();
    super.dispose();
  }

  List<VerseCollection> get collections => List.unmodifiable(_collections);

  /// Inicializa conex√£o com Firebase e sincroniza dados
  void _initializeFirebaseConnection() {
    if (_firebaseService.isAuthenticated) {
      _listenToCollectionChanges();
    } else {
      _firebaseService.authStateChanges.listen((user) {
        if (user != null) {
          _listenToCollectionChanges();
        } else {
          _clearLocalCollections();
        }
      });
    }
  }

  /// Escuta mudan√ßas nas cole√ß√µes do Firebase
  void _listenToCollectionChanges() {
    if (!_firebaseService.isAuthenticated) {
      debugPrint('‚ö†Ô∏è Usu√°rio n√£o autenticado - n√£o carregando cole√ß√µes');
      return;
    }
    
    _collectionsSubscription?.cancel();
    _collectionsSubscription = _firebaseService.getUserVerseCollections().listen(
      (collections) {
        try {
          debugPrint('üîÑ Carregando ${collections.length} cole√ß√µes do Firebase');
          _collections.clear();
          _collections.addAll(collections);
          debugPrint('‚úÖ ${_collections.length} cole√ß√µes carregadas com sucesso');
          notifyListeners();
        } catch (e) {
          debugPrint('‚ùå Erro ao processar cole√ß√µes: $e');
        }
      },
      onError: (error) {
        debugPrint('‚ùå Erro ao carregar cole√ß√µes: $error');
      },
    );
  }

  /// Limpa cole√ß√µes locais
  void _clearLocalCollections() {
    _collections.clear();
    notifyListeners();
  }

  /// Adiciona uma nova cole√ß√£o no Firebase
  Future<bool> addCollection(VerseCollection collection) async {
    try {
      if (!_firebaseService.isAuthenticated) {
        debugPrint('‚ùå Usu√°rio n√£o autenticado');
        return false;
      }

      final collectionId = await _firebaseService.createVerseCollection(collection);
      if (collectionId != null) {
        debugPrint('‚úÖ Cole√ß√£o criada no Firebase: $collectionId');
        return true;
      }
      return false;
    } catch (e) {
      debugPrint('‚ùå Erro ao adicionar cole√ß√£o: $e');
      return false;
    }
  }

  /// Remove uma cole√ß√£o do Firebase
  Future<bool> removeCollection(String id) async {
    try {
      if (!_firebaseService.isAuthenticated) {
        debugPrint('‚ùå Usu√°rio n√£o autenticado');
        return false;
      }

      final success = await _firebaseService.deleteVerseCollection(id);
      if (success) {
        debugPrint('‚úÖ Cole√ß√£o removida do Firebase: $id');
      }
      return success;
    } catch (e) {
      debugPrint('‚ùå Erro ao remover cole√ß√£o: $e');
      return false;
    }
  }

  /// Atualiza uma cole√ß√£o existente no Firebase
  Future<bool> updateCollection(VerseCollection updatedCollection) async {
    try {
      if (!_firebaseService.isAuthenticated) {
        debugPrint('‚ùå Usu√°rio n√£o autenticado');
        return false;
      }

      final updates = {
        'title': updatedCollection.title,
        'verses': updatedCollection.verses.map((verse) => verse.toJson()).toList(),
        'updatedAt': DateTime.now(),
      };

      final success = await _firebaseService.updateVerseCollection(updatedCollection.id, updates);
      if (success) {
        debugPrint('‚úÖ Cole√ß√£o atualizada no Firebase: ${updatedCollection.id}');
      }
      return success;
    } catch (e) {
      debugPrint('‚ùå Erro ao atualizar cole√ß√£o: $e');
      return false;
    }
  }

  /// Busca uma cole√ß√£o por ID
  VerseCollection? getCollectionById(String id) {
    try {
      return _collections.firstWhere((c) => c.id == id);
    } catch (e) {
      return null;
    }
  }

  /// Busca cole√ß√µes por termo
  List<VerseCollection> searchCollections(String searchTerm) {
    if (searchTerm.isEmpty) return collections;
    
    final term = searchTerm.toLowerCase();
    return _collections.where((collection) {
      return collection.title.toLowerCase().contains(term) ||
          collection.verses.any((verse) => 
            verse.text.toLowerCase().contains(term) ||
            verse.reference.toLowerCase().contains(term)
          );
    }).toList();
  }

  /// Ordena cole√ß√µes por crit√©rio
  void sortCollections(SortCriteria criteria) {
    switch (criteria) {
      case SortCriteria.dateNewest:
        _collections.sort((a, b) => b.createdDate.compareTo(a.createdDate));
        break;
      case SortCriteria.dateOldest:
        _collections.sort((a, b) => a.createdDate.compareTo(b.createdDate));
        break;
      case SortCriteria.alphabetical:
        _collections.sort((a, b) => a.title.compareTo(b.title));
        break;
      case SortCriteria.biblical:
        // Ordena√ß√£o b√≠blica seria mais complexa, mas por ora fazemos por refer√™ncia
        _collections.sort((a, b) {
          final aFirstRef = a.verses.isNotEmpty ? a.verses.first.reference : '';
          final bFirstRef = b.verses.isNotEmpty ? b.verses.first.reference : '';
          return aFirstRef.compareTo(bFirstRef);
        });
        break;
    }
    notifyListeners();
  }

  /// For√ßa recarregamento das cole√ß√µes do Firebase
  Future<void> refreshCollections() async {
    if (_firebaseService.isAuthenticated) {
      _listenToCollectionChanges();
    }
  }

  /// Verifica se o usu√°rio est√° autenticado
  bool get isAuthenticated => _firebaseService.isAuthenticated;
}

